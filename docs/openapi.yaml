openapi: 3.0.3
info:
  title: BuildSure API
  description: FastAPI backend for BuildSure project management system with complete CRUD operations for organizations, users, projects, and sections.
  version: 2.0.0
  contact:
    name: BuildSure Team
    email: support@buildsure.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.buildsure.com
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Organizations
    description: Organization management operations
  - name: Users
    description: User management operations
  - name: Projects
    description: Project management operations
  - name: Sections
    description: Section management operations

paths:
  /:
    get:
      summary: Root endpoint
      description: Welcome message and API information
      tags:
        - Health
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to BuildSure API v2.0"
                  docs:
                    type: string
                    example: "/docs"
                  redoc:
                    type: string
                    example: "/redoc"

  /api/v1/health:
    get:
      summary: Health check
      description: Check API health and database connectivity
      tags:
        - Health
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  version:
                    type: string
                    example: "2.0.0"
                  database:
                    type: string
                    example: "connected"

  /api/v1/organizations/:
    get:
      summary: List organizations
      description: Get paginated list of organizations
      tags:
        - Organizations
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'

    post:
      summary: Create organization
      description: Create a new organization
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreate'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/organizations/{organization_id}:
    get:
      summary: Get organization
      description: Get organization by ID
      tags:
        - Organizations
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update organization
      description: Update organization by ID
      tags:
        - Organizations
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdate'
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete organization
      description: Delete organization by ID (cascades to users and projects)
      tags:
        - Organizations
      parameters:
        - name: organization_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Organization deleted
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/:
    get:
      summary: List users
      description: Get paginated list of users with optional organization filtering
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: org_id
          in: query
          description: Filter by organization ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

    post:
      summary: Create user
      description: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request (organization not found or email already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{user_id}:
    get:
      summary: Get user
      description: Get user by ID
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user
      description: Update user by ID
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request (organization not found or email already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Delete user by ID (cascades to projects)
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/organizations/{org_id}/users:
    get:
      summary: List users by organization
      description: Get paginated list of users for a specific organization
      tags:
        - Users
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of users in organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/projects/:
    get:
      summary: List projects
      description: Get paginated list of projects with optional filtering
      tags:
        - Projects
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: org_id
          in: query
          description: Filter by organization ID
          required: false
          schema:
            type: string
            format: uuid
        - name: user_id
          in: query
          description: Filter by user ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'

    post:
      summary: Create project
      description: Create a new project
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Bad request (organization or user not found, or user doesn't belong to organization)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/projects/{project_id}:
    get:
      summary: Get project
      description: Get project by ID
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update project
      description: Update project by ID
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Bad request (organization or user not found, or user doesn't belong to organization)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete project
      description: Delete project by ID (cascades to sections)
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/projects/organizations/{org_id}/projects:
    get:
      summary: List projects by organization
      description: Get paginated list of projects for a specific organization
      tags:
        - Projects
      parameters:
        - name: org_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of projects in organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/projects/users/{user_id}/projects:
    get:
      summary: List projects by user
      description: Get paginated list of projects for a specific user
      tags:
        - Projects
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of projects for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/projects/{project_id}/report:
    get:
      summary: Get project report
      description: Generate and return a comprehensive report for the project in various formats (JSON, PDF, Excel)
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: format
          in: query
          description: Report format
          required: false
          schema:
            type: string
            enum: [json, pdf, excel]
            default: json
      responses:
        '200':
          description: Project report in JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReportResponse'
            application/pdf:
              schema:
                type: string
                format: binary
              example: "PDF file content"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
              example: "Excel file content"
        '400':
          description: Invalid format parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to generate report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/sections/:
    get:
      summary: List sections
      description: Get paginated list of sections with optional project filtering
      tags:
        - Sections
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: project_id
          in: query
          description: Filter by project ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of sections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionListResponse'

    post:
      summary: Create section
      description: Create a new section
      tags:
        - Sections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionCreate'
      responses:
        '201':
          description: Section created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionResponse'
        '400':
          description: Bad request (project not found or section number already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/sections/{section_id}:
    get:
      summary: Get section
      description: Get section by ID
      tags:
        - Sections
      parameters:
        - name: section_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Section details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionResponse'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update section
      description: Update section by ID
      tags:
        - Sections
      parameters:
        - name: section_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionUpdate'
      responses:
        '200':
          description: Section updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionResponse'
        '400':
          description: Bad request (project not found or section number already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete section
      description: Delete section by ID
      tags:
        - Sections
      parameters:
        - name: section_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Section deleted
        '404':
          description: Section not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/sections/projects/{project_id}/sections:
    get:
      summary: List sections by project
      description: Get paginated list of sections for a specific project
      tags:
        - Sections
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of sections in project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionListResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Organization Schemas
    OrganizationBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          example: "Acme Corporation"
        description:
          type: string
          example: "A leading technology company"

    OrganizationCreate:
      allOf:
        - $ref: '#/components/schemas/OrganizationBase'

    OrganizationUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          example: "Acme Corporation"
        description:
          type: string
          nullable: true
          example: "A leading technology company"

    OrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/OrganizationBase'
        - type: object
          required:
            - id
            - created_at
            - updated_at
          properties:
            id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174000"
            created_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"

    OrganizationListResponse:
      type: object
      required:
        - items
        - total
        - page
        - size
        - pages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        pages:
          type: integer
          example: 1

    # User Schemas
    UserBase:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          maxLength: 255
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - org_id
          properties:
            org_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174000"

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"
        org_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - id
            - org_id
            - created_at
            - updated_at
          properties:
            id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174001"
            org_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174000"
            created_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"

    UserListResponse:
      type: object
      required:
        - items
        - total
        - page
        - size
        - pages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        pages:
          type: integer
          example: 1

    # Project Schemas
    ProjectStatus:
      type: string
      enum:
        - not_started
        - in_progress
        - completed
        - on_hold
      example: "not_started"

    ProjectBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          example: "Website Redesign"
        description:
          type: string
          nullable: true
          example: "Complete redesign of company website"
        status:
          $ref: '#/components/schemas/ProjectStatus'
        current_section:
          type: integer
          minimum: 0
          default: 0
          example: 0
        total_sections:
          type: integer
          minimum: 0
          default: 0
          example: 5
        completed_sections:
          type: integer
          minimum: 0
          default: 0
          example: 0

    ProjectCreate:
      allOf:
        - $ref: '#/components/schemas/ProjectBase'
        - type: object
          required:
            - org_id
            - user_id
          properties:
            org_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174000"
            user_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174001"

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          example: "Website Redesign"
        description:
          type: string
          nullable: true
          example: "Complete redesign of company website"
        status:
          $ref: '#/components/schemas/ProjectStatus'
        current_section:
          type: integer
          minimum: 0
          example: 1
        total_sections:
          type: integer
          minimum: 0
          example: 5
        completed_sections:
          type: integer
          minimum: 0
          example: 1
        org_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"

    ProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectBase'
        - type: object
          required:
            - id
            - org_id
            - user_id
            - created_at
            - updated_at
          properties:
            id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174002"
            org_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174000"
            user_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174001"
            created_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"

    ProjectListResponse:
      type: object
      required:
        - items
        - total
        - page
        - size
        - pages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        pages:
          type: integer
          example: 1

    # Section Schemas
    SectionStatus:
      type: string
      enum:
        - pending
        - in_progress
        - completed
      example: "pending"

    SectionBase:
      type: object
      required:
        - section_number
      properties:
        section_number:
          type: integer
          minimum: 1
          example: 1
        status:
          $ref: '#/components/schemas/SectionStatus'
        user_input:
          type: object
          nullable: true
          example:
            requirements: "Build a login system"
            specifications: "Use OAuth 2.0"
        draft_output:
          type: object
          nullable: true
          example:
            code: "// Login component code"
            documentation: "Login system documentation"
        final_output:
          type: object
          nullable: true
          example:
            deliverable: "Complete login system"
            files: ["login.js", "auth.js"]

    SectionCreate:
      allOf:
        - $ref: '#/components/schemas/SectionBase'
        - type: object
          required:
            - project_id
          properties:
            project_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174002"

    SectionUpdate:
      type: object
      properties:
        section_number:
          type: integer
          minimum: 1
          example: 1
        status:
          $ref: '#/components/schemas/SectionStatus'
        user_input:
          type: object
          nullable: true
          example:
            requirements: "Build a login system"
            specifications: "Use OAuth 2.0"
        draft_output:
          type: object
          nullable: true
          example:
            code: "// Login component code"
            documentation: "Login system documentation"
        final_output:
          type: object
          nullable: true
          example:
            deliverable: "Complete login system"
            files: ["login.js", "auth.js"]
        project_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174002"

    SectionResponse:
      allOf:
        - $ref: '#/components/schemas/SectionBase'
        - type: object
          required:
            - id
            - project_id
            - created_at
            - updated_at
          properties:
            id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174003"
            project_id:
              type: string
              format: uuid
              example: "123e4567-e89b-12d3-a456-426614174002"
            created_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"
            updated_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"

    SectionListResponse:
      type: object
      required:
        - items
        - total
        - page
        - size
        - pages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SectionResponse'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        pages:
          type: integer
          example: 1

    # Project Report Schemas
    SectionReportData:
      type: object
      required:
        - section_number
        - completed
      properties:
        section_number:
          type: integer
          minimum: 1
          example: 1
        final_output:
          type: object
          nullable: true
          example:
            deliverable: "Complete login system"
            files: ["login.js", "auth.js"]
        completed:
          type: boolean
          example: true

    ProjectReportResponse:
      type: object
      required:
        - project_id
        - project_name
        - project_status
        - total_sections
        - completed_sections
        - generated_at
        - sections
      properties:
        project_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174002"
        project_name:
          type: string
          example: "Website Redesign"
        project_status:
          $ref: '#/components/schemas/ProjectStatus'
        total_sections:
          type: integer
          example: 26
        completed_sections:
          type: integer
          example: 15
        generated_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        sections:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SectionReportData'
          example:
            section_1:
              section_number: 1
              final_output:
                deliverable: "Project requirements analysis"
                files: ["requirements.md"]
              completed: true
            section_2:
              section_number: 2
              final_output: null
              completed: false

    # Error Schema
    ErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          example: "Organization not found"
